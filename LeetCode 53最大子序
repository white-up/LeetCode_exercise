/**
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
*/
//思路1 动态规划
class Solution {
    public int maxSubArray(int[] nums) {
        int cSum=0;
        int maxSum=nums[0];
        for (int num : nums) {
            cSum=Math.max(num,cSum+num);
            maxSum=Math.max(cSum,maxSum);
        }
        return maxSum;
    }
}
//思路2 贪心
class Solution {
    public int maxSubArray(int[] nums) {
    int maxSum=nums[0];
    int frontSum=0;
        for (int num : nums) {
            frontSum+=num;
            maxSum=Math.max(maxSum,frontSum);
            frontSum = frontSum>0?frontSum:0;
        }
        return maxSum;
    }
}
//思路3 分治
class Solution {
    /**
     * lSum:左起最大子序
     * rSum:右起最大子序
     * mSum:最大子序
     * iSum:子序和
     * */
    public class Status {
        public int lSum, rSum, mSum, iSum;
        public Status(int lSum, int rSum, int mSum, int iSum) {
            this.lSum = lSum;
            this.rSum = rSum;
            this.mSum = mSum;
            this.iSum = iSum;
        }
    }
    /**
     * a:目标数组
     * l:起始坐标
     * r:终止坐标
     * */
    public Status getInfo(int[] a, int l, int r) {
        //如果只有一个数值
        if (l == r) {
            return new Status(a[l], a[l], a[l], a[l]);
        }
        //求中间值
        int m = (l + r) >> 1;
        Status lSub = getInfo(a, l, m);
        Status rSub = getInfo(a, m + 1, r);
        return pushUp(lSub, rSub);
    }
    //返回扩大范围子序列
    public Status pushUp(Status l, Status r) {
        int iSum = l.iSum + r.iSum;
        int lSum = Math.max(l.lSum, l.iSum + r.lSum);
        int rSum = Math.max(r.rSum, r.iSum + l.rSum);
        int mSum = Math.max(Math.max(l.mSum, r.mSum), l.rSum + r.lSum);
        return new Status(lSum, rSum, mSum, iSum);
    }
    //入口
    public int maxSubArray(int[] nums) {
        return getInfo(nums, 0, nums.length - 1).mSum;
    }
}

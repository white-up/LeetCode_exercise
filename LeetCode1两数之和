/**
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
*/
//思路1 HashMap
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> hash = new HashMap<Integer, Integer>();
        for (int i = 0; i < nums.length; ++i) {
            if (hash.containsKey(target - nums[i])) {
                return new int[]{hash.get(target - nums[i]), i};
            }
            hash.put(nums[i], i);
        }
        return new int[0];
    }
}
//思路2 双轴查询
class Solution {
    public  int[] twoSum(int[] nums, int target) {
        int[] result = new int[]{-1, -1};
        if (nums.length == 2) {
            return new int[]{0, 1};
        }
        //创建排序数组
        int[] team = Arrays.copyOf(nums, nums.length);
        Arrays.sort(team);
        //左右指针
        int l = 0;
        int r = nums.length - 1;
        //寻找匹配值
        while (true) {
            if (team[l] + team[r] > target) {
                r--;
                continue;
            }
            if (team[l] + team[r] < target) {
                l++;
                continue;
            }
            if (team[l] + team[r] == target) {
                break;
            }
        }
        //查找角标
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == team[l] && result[0] == -1) {
                result[0] = i;
                continue;
            }
            if (nums[i] == team[r] && result[1] == -1) {
                result[1] = i;
            }
        }
        return result;
    }
}
